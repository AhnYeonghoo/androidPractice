배열
    - 특정 하나의 변수에 복수개의 값을 할당하고 싶은 경우
var examScores: Int = .... 여러개의 값을 넣고 싶을 때! 사용하는 것.
    - 배열은 저장될 수 있는 값의 갯수를 정해놓아야 하고, 변경될 수 없다.


1. 배열을 선언하는 방법 (1)
- arrayOf<자료형/생략>(값1, 값2, 값3)
    - 생략했을 경우, 복수개의 자료형이 배열의 인자로 올 수 있다.
    - var array1: arrayOf('a', 3, "asd", true) -> 가능!
    - var array2: arrayOf<String>("Abc", "aBc", "abC") -> 타입 지정 방식

- <자료형> -> 을 대체할 수 있는 방법
    - var array4 = intArrayOf(1,2,3,4,5)
    - var array5 = booleanArrayOf(true, false, true)

- null만 인자로 받는 배열
    - var nulls = arrayOfNulls<Int>(4, 5)

2. 추가
- 개발 언어는 문법적인 요소만 있는 것이 아니라, 일반적이고 개발자가 많이 사용하는
- 기능들을 포함하고 있다. (기본 제공해주는 메서드들)
- 만약 내가 원하는 기능이 기본적으로 포함된 기능이 아니라면, 만들어서 사용하거나
- 그 기능을 추가하면 된다.(Library !!)

3. 배열을 선언하는 방법 (2)
- 자료형/생략Array(크기, {값 / 생략가능})
    - 배열을 선언할 때 가장 중요한 것은 크기!! 크기는 반드시 정해져야만 생성됨.
    - but, 값은 생략이 가능함. 하지만 크기(개수)는 절대 생략 불가능
    - val array = Array(10, {0}) -> 10칸짜리 배열을 만들고 0으로 초기화
- 자료형 명시
    - var array = IntArray(10, {0}) -> 위와 동일
    - var array = Array<Int>(10, {0}) -> 모두 동일
    - var array = DoubleArray(10, {0.0})

4. 배열을 선언하는 방법 (3)
- Array<자료형>(크기, {값/생략})
    - var array = Array<Int>(10, {0})
    - var array = Array(10, {0})
    - var array = Array<String>(10, {"hi"})
        - 3번 방법이 가장 자주 많이 쓰인다!!
    - 일관성 있게 이 방법으로 사용하기!

5. 배열에 값을 넣는 방법
- var array = Array<Int>(3, {0}) [0, 0, 0, ...]

    - 1번 방법 -> 배열명[index] = value
        - array[0] = 100
        - array[1] = 200
    - 2번 방법 -> 배열명.set(index, value)
        -array.set(0, 100)
        -array.set(1, 200)

    추가 Index
    - index는 0부터 시작한다.
        - [0, 2, 100, ...]
            - index[0] == 0
            - index[1] == 2
    - 순서를 나타낸다.

6. 배열에 있는 값을 가져오는 방법
- 배열명[index]
    -val value = array[3]
- 배열명.get(index)
    - var value = array.get(3)