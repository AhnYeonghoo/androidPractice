속성(Property)

class User7 {
    val age: Int
        get() {
            getter
        }
        set(value: Int) {
            setter
        }
    val name: String

    constructor(age: Int, name: String) {
        this.age = age
        this.name = name
    }
}

=> 속성: age, name

1. getter/setter
- getter: 클래스의 속성에 접근할 때 ( println(user.age) => 코틀린이 getter를 호출)
- setter: 클래스의 속성의 값을 설정할 때 ( user.age = 30 => 코틀린이 setter를 호출 )
- 기본적으로 코틀린이 제공해주지만, 특별한 기능을 추가하고 싶을 경우엔 직접 getter/setter 설정 가능

2. lateinit
class User7 {
    lateinit var age: Int
    lateinit var name: String => init 블록에서 초기화하지 않고 나중에 초기화 가능(eg: 부생성자)
}
- 조건
    - var로 선언한 프로퍼티에만 적용이 가능하다.
    - 주 생성자에는 사용할 수 없다.
    - getter/setter 적용이 불가능하다.
    - nullable에는 적용이 불가능하다.
    - 기초타입 프로퍼티에는 적용이 불가능하다.
        - 기초타입==원시타입(Primitive Type)
        - String을 제외한 우리가 흔히 알고있는 자료형 -> (Int, Float, Double, Long)
    - isInitialized로 초기화 여부를 확인

    더블콜론 (::)
    - Reflaction 기능
    - 런타임에 프로그램의 구조를 조사할 수 있는 기능
    - lateinit의 초기화 여부는 런타임이 아니면 알 수 없다.

lazy (지연 초기화)
- 초기화를 미루고 미루고 미뤄서 정말로 필요한 순간에 초기화 하겠다.
- lateinit은 런타임 때 초기화가 무조건 되어 있지만, lazy는 됐을 수도 안됐을 수도 있음.
- lazy는 그 프로퍼티에 접근! 할 때 초기화 되는 것

class Computer {
    val ram: Ram
}